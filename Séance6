import random
import arcade
import math

SCREEN_WIDTH = 900
SCREEN_HEIGHT = 600
SCREEN_TITLE = "Cereal Carnage"

INSTRUCTIONS_PAGE_0 = 0
INSTRUCTIONS_PAGE_1 = 1
GAME_RUNNING = 2
GAME_OVER = 3
WIN = 4

SPRITE_SCALING_PLAYER = 0.9
SPRITE_SCALING_GOBLIN = 1.4
SPRITE_SCALING_LOOP = 0.3
SPRITE_SCALING_LASERRED = 0.5

PLAYER_SKIN = "images/player.png"
LASER_SKIN_GOBLIN = "images/laserred.png"
LASER_SKIN_PLAYER = "images/loopblue.png"
LASER_SKIN_PLAYER1 = "images/looppurple.png"
LASER_SKIN_PLAYER2 = "images/loopyellow.png"
LASER_SKIN_PLAYER3 = "images/loopred.png"
LASER_SKIN_PLAYER4 = "images/loopgreen.png"
GOBLIN_SKIN = "images/goblin.png"
BACKGROUND = "images/floor.png"
BACKGROUND1 = "images/floortorch.png"

PICK = [LASER_SKIN_PLAYER,LASER_SKIN_PLAYER1,LASER_SKIN_PLAYER2,LASER_SKIN_PLAYER3,LASER_SKIN_PLAYER4]
GOBLIN_COUNT0 = [1,2,3,4,5,6,7,8,9,10]


MOVEMENT_SPEED = 7
BULLET_SPEED = 6
BULLET1_SPEED = 6

class Player(arcade.Sprite):

    def update(self):
        self.center_x += self.change_x
        self.center_y += self.change_y

        if self.left < 0:
            self.left = 0
        elif self.right > SCREEN_WIDTH - 1:
            self.right = SCREEN_WIDTH - 1

        if self.bottom < 0:
            self.bottom = 0
        elif self.top > SCREEN_HEIGHT - 1:
            self.top = SCREEN_HEIGHT - 1

class MyGame(arcade.Window):
    """ Main application class. """

    def __init__(self):
        """ Initializer """
        # Call the parent class initializer
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)

        self.frame_count = 0
        

        # Start 'state' will be showing the first page of instructions.
        self.current_state = INSTRUCTIONS_PAGE_0
        
        self.player_list = None
        self.goblin_list = None
        self.bullet_list = None
        self.player = None
        self.bullet1_list = None
        
        # Set up the player info
        self.player_sprite = None
        self.score = 0
        self.score_text = None

        self.background = None
        self.background = arcade.load_texture(BACKGROUND)
        
        # STEP 1: Put each instruction page in an image. Make sure the image
        # matches the dimensions of the window, or it will stretch and look
        # ugly. You can also do something similar if you want a page between
        # each level.
        self.instructions = []
        texture = arcade.load_texture(BACKGROUND1)
        self.instructions.append(texture)
        
    def setup(self):

        """ Set up the game and initialize the variables. """

        # Sprite lists
        self.player_list = arcade.SpriteList()
        self.goblin_list = arcade.SpriteList()
        self.bullet_list = arcade.SpriteList()
        self.bullet1_list = arcade.SpriteList()
      
        # Set up the player
        self.score = 0
        self.player_sprite = Player(PLAYER_SKIN, SPRITE_SCALING_PLAYER)
        self.player_sprite.center_x = 50
        self.player_sprite.center_y = 50
        self.player_list.append(self.player_sprite)
        
        for i in range(random.choice(GOBLIN_COUNT0)):
            goblin = arcade.Sprite(GOBLIN_SKIN, SPRITE_SCALING_GOBLIN)
            goblin.center_x = random.randrange(SCREEN_WIDTH)
            goblin.center_y = random.randrange(120, SCREEN_HEIGHT)
            goblin.angle = 180
            self.goblin_list.append(goblin)
            
            # Add the goblins to the lists
            self.goblin_list.append(goblin)

    # STEP 2: Add this function.
    def draw_instructions_page(self, page_number):
        """
        Draw an instruction page. Load the page as an image.
        """
        page_texture = self.instructions[page_number]
        arcade.draw_texture_rectangle(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 3.6,
                                      page_texture.width,
                                      page_texture.height, page_texture, 0)
    
               
    # STEP 3: Add this function
    def draw_game_over(self):
        """
        Draw "Game over" across the screen.
        """
        output = "Game Over"
        arcade.draw_text(output, 300, 350, arcade.color.WHITE, 54)

        output = "Click to restart"
        arcade.draw_text(output, 345, 300, arcade.color.WHITE, 30)
         
        # Put the text on the screen.
        output = f"Votre score: {self.score}"
        arcade.draw_text(output, 350, 200, arcade.color.WHITE, 25)
        
    def draw_game(self):
        """
        Draw all the sprites, along with the score.
        """
        
        arcade.draw_texture_rectangle(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2,
                                      SCREEN_WIDTH, SCREEN_HEIGHT, self.background)
        # Draw all the sprites.
        self.goblin_list.draw()
        self.bullet_list.draw()
        self.player_list.draw()
        self.bullet1_list.draw()
        
        # Put the text on the screen.
        output = f"Score: {self.score}"
        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)
        
    def draw_win(self):
        """
        Draw "You Win !" across the screen.
        """
        output = "You Win !"
        arcade.draw_text(output, 300, 350, arcade.color.WHITE, 54)

        output = "Click to restart"
        arcade.draw_text(output, 320, 300, arcade.color.WHITE, 30)
        
        # Put the text on the screen.
        output = f"Votre score: {self.score}"
        arcade.draw_text(output, 320, 250, arcade.color.WHITE, 25)       
            
    def on_draw(self):
        """
        Render the screen.
        """

        # This command has to happen before we start drawing
        arcade.start_render()
       
        if self.current_state == INSTRUCTIONS_PAGE_0:
            self.draw_instructions_page(0)


        elif self.current_state == GAME_RUNNING:
            self.draw_game()
            
        
        else:
            arcade.draw_texture_rectangle(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2,
                                      SCREEN_WIDTH, SCREEN_HEIGHT, self.background)

            self.draw_game_over()
        
        if len(self.goblin_list) == 0:
            self.draw_win()
            
        # Draw the background texture
        self.background = arcade.load_texture(BACKGROUND)
    
    def update(self, delta_time):
        """ Movement and game logic """
        
        # This command has to happen before we start drawing
        arcade.start_render()
        
        self.frame_count += 1
        
        if self.current_state == INSTRUCTIONS_PAGE_0:
            self.draw_instructions_page(0)
        
            
        else:
            self.draw_win()
            self.draw_game_over()
                        
        # Only move and do things if the game is running.
        if self.current_state == GAME_RUNNING:
            
            # Call update on all sprites
            self.goblin_list.update()
            self.bullet_list.update()
            self.bullet1_list.update()
            self.player_list.update()

            
        # Loop through each bullet
        for bullet in self.bullet_list:
            
            # Check this bullet to see if it hit a goblin
            hit_list = arcade.check_for_collision_with_list(bullet, self.goblin_list)
            
            # If the bullet flies off-screen, remove it.
            if bullet.bottom > self.width or bullet.top < 0 or bullet.right < 0 or bullet.left > self.width:
                bullet.kill()
            
            # If it did, get rid of the bullet
            if len(hit_list) > 0:
                bullet.kill()
            
            # For every goblin we hit, add to the score and remove the goblin
            for goblin in hit_list:
               goblin.kill()
               self.score += 0.5
               
    
        # Loop through each enemy that we have
        for goblin in self.goblin_list:
                
            # Position the start at the enemy's current location
            start_x = goblin.center_x
            start_y = goblin.center_y

            # Get the destination location for the bullet
            dest_x = self.player_sprite.center_x
            dest_y = self.player_sprite.center_y

            # Do math to calculate how to get the bullet to the destination.
            # Calculation the angle in radians between the start points
            # and end points. This is the angle the bullet will travel.
            x_diff = dest_x - start_x
            y_diff = dest_y - start_y
            angle = math.atan2(y_diff, x_diff)

            # Set the enemy to face the player.
            goblin.angle = math.degrees(125.6)

            # Shoot every 90 frames change of shooting each frame
            if self.frame_count % 90 == 0:
                bullet1 = arcade.Sprite(LASER_SKIN_GOBLIN, SPRITE_SCALING_LASERRED)
                bullet1.center_x = start_x
                bullet1.center_y = start_y

                # Angle the bullet sprite
                bullet1.angle = math.degrees(angle)

                # Taking into account the angle, calculate our change_x
                # and change_y. Velocity is how fast the bullet travels.
                bullet1.change_x = math.cos(angle) * BULLET1_SPEED
                bullet1.change_y = math.sin(angle) * BULLET1_SPEED

                self.bullet1_list.append(bullet1)        
        
        # Loop through each bullet1
        for bullet1 in self.bullet1_list:
            
            # Check this bullet1 to see if it hit a player
            hit_list = arcade.check_for_collision_with_list(bullet1, self.player_list)
            
            # If it did, get rid of the bullet
            if len(hit_list) > 0:
                bullet1.kill()
                self.current_state = GAME_OVER
                
            # If the bullet1 flies off-screen, remove it.
            if bullet1.bottom > self.width or bullet1.top < 0 or bullet1.right < 0 or bullet1.left > self.width:
                bullet1.kill()
            
            
        self.bullet_list.update() 
        self.bullet1_list.update() 
        
        
                
    def on_mouse_press(self, x, y, button, modifiers):
        """
        Called whenever the mouse moves.
    
        """
        
        # Change states as needed.
        if self.current_state == INSTRUCTIONS_PAGE_0:
            # Start the game.
            self.setup()
            self.current_state = GAME_RUNNING
        
    
        if self.current_state == WIN:
            # Restart the game.
            self.setup()
            self.current_state = GAME_RUNNING
        
        elif self.current_state == GAME_OVER:
            # Restart the game.
            self.setup()
            self.current_state = GAME_RUNNING
       
        # Create a bullet
        bullet = arcade.Sprite(random.choice(PICK), SPRITE_SCALING_LOOP)

        # Position the bullet at the player's current location
        start_x = self.player_sprite.center_x
        start_y = self.player_sprite.center_y
        bullet.center_x = start_x
        bullet.center_y = start_y

        # Get from the mouse the destination location for the bullet
        # IMPORTANT! If you have a scrolling screen, you will also need
        # to add in self.view_bottom and self.view_left.
        dest_x = x
        dest_y = y

        # Do math to calculate how to get the bullet to the destination.
        # Calculation the angle in radians between the start points
        # and end points. This is the angle the bullet will travel.
        x_diff = dest_x - start_x
        y_diff = dest_y - start_y
        angle = math.atan2(y_diff, x_diff)

        # Angle the bullet sprite so it doesn't look like it is flying
        # sideways.
        bullet.angle = math.degrees(angle)

        # Taking into account the angle, calculate our change_x
        # and change_y. Velocity is how fast the bullet travels.
        bullet.change_x = math.cos(angle) * BULLET_SPEED
        bullet.change_y = math.sin(angle) * BULLET_SPEED

        # Add the bullet to the appropriate lists
        self.bullet_list.append(bullet)
    
   
    def on_key_press(self, key, modifiers):
        """Called whenever a key is pressed. """

        if key == arcade.key.UP:
            self.player_sprite.change_y = MOVEMENT_SPEED
        elif key == arcade.key.DOWN:
            self.player_sprite.change_y = -MOVEMENT_SPEED
        elif key == arcade.key.LEFT:
            self.player_sprite.change_x = -MOVEMENT_SPEED
        elif key == arcade.key.RIGHT:
            self.player_sprite.change_x = MOVEMENT_SPEED

    def on_key_release(self, key, modifiers):
        """Called when the user releases a key. """

        if key == arcade.key.UP or key == arcade.key.DOWN:
            self.player_sprite.change_y = 0
        elif key == arcade.key.LEFT or key == arcade.key.RIGHT:
            self.player_sprite.change_x = 0


def main():
    window = MyGame()
    window.setup()
    arcade.run()


if __name__ == "__main__":
    main()

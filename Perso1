import random
import arcade
import math
import os

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 750
SCREEN_TITLE = "Test"

SPRITE_SCALING_PLAYER = 0.9
SPRITE_SCALING_GOBLIN = 1.4
SPRITE_SCALING_LASER = 0.3
SPRITE_SCALING_LASERRED = 0.08

GOBLIN_COUNT = 5
MOVEMENT_SPEED = 7
BULLET_SPEED = 6
BULLET1_SPEED = 6

class Player(arcade.Sprite):

    def update(self):
        self.center_x += self.change_x
        self.center_y += self.change_y

        if self.left < 0:
            self.left = 0
        elif self.right > SCREEN_WIDTH - 1:
            self.right = SCREEN_WIDTH - 1

        if self.bottom < 0:
            self.bottom = 0
        elif self.top > SCREEN_HEIGHT - 1:
            self.top = SCREEN_HEIGHT - 1

class MyGame(arcade.Window):
    """ Main application class. """

    def __init__(self):
        """ Initializer """
        # Call the parent class initializer
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)

        self.frame_count = 0

        self.player_list = None
        self.goblin_list = None
        self.bullet_list = None
        self.player = None
        self.bullet1_list = None
        
        # Set up the player info
        self.player_sprite = None
        self.score = 0
        self.score_text = None

        self.background = None
        # arcade.set_background_color(arcade.color.GRAY)
        
    def setup(self):

        """ Set up the game and initialize the variables. """

        # Sprite lists
        self.player_list = arcade.SpriteList()
        self.goblin_list = arcade.SpriteList()
        self.bullet_list = arcade.SpriteList()
        self.bullet1_list = arcade.SpriteList()
        
        
        self.background = arcade.load_texture("images/floor.png")
        
        # Set up the player
        self.score = 0
        self.player_sprite = Player("images/player.png", SPRITE_SCALING_PLAYER)
        self.player_sprite.center_x = 50
        self.player_sprite.center_y = 50
        self.player_list.append(self.player_sprite)
        
        for i in range(GOBLIN_COUNT):
            goblin = arcade.Sprite("images/goblin.png", SPRITE_SCALING_GOBLIN)
            goblin.center_x = random.randrange(SCREEN_WIDTH)
            goblin.center_y = random.randrange(120, SCREEN_HEIGHT)
            goblin.angle = 180
            self.goblin_list.append(goblin)
            
            # Add the goblins to the lists
            self.goblin_list.append(goblin)

        # Set the background color
       # arcade.set_background_color(arcade.color.GRAY)

    def on_draw(self):
        """
        Render the screen.
        """

        # This command has to happen before we start drawing
        arcade.start_render()
        
        # Draw the background texture
        arcade.draw_texture_rectangle(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2,
                                      SCREEN_WIDTH, SCREEN_HEIGHT, self.background)
        # Draw all the sprites.
        self.goblin_list.draw()
        self.bullet_list.draw()
        self.player_list.draw()
        self.bullet1_list.draw()
            
        
        # Put the text on the screen.
        output = f"Score: {self.score}"
        arcade.draw_text(output, 10, 20, arcade.color.WHITE, 14)

  
    def update(self, delta_time):
        """ Movement and game logic """
        
        # This command has to happen before we start drawing
        arcade.start_render()
       
        # Call update on all sprites
        self.bullet_list.update()
        self.bullet1_list.update()
        self.player_list.update()
        
        self.frame_count += 1
        
        # Loop through each bullet
        for bullet in self.bullet_list:
            
            # Check this bullet to see if it hit a goblin
            hit_list = arcade.check_for_collision_with_list(bullet, self.goblin_list)
            
            # If the bullet flies off-screen, remove it.
            if bullet.bottom > self.width or bullet.top < 0 or bullet.right < 0 or bullet.left > self.width:
                bullet.kill()
       
            # For every goblin we hit, add to the score and remove the goblin
            for goblin in hit_list:
               goblin.kill()
               self.score += 0.5
               
            # If it did, get rid of the bullet
            if len(hit_list) > 0:
                bullet.kill()
       
        # Loop through each enemy that we have
        for goblin in self.goblin_list:
                
            # Position the start at the enemy's current location
            start_x = goblin.center_x
            start_y = goblin.center_y

            # Get the destination location for the bullet
            dest_x = self.player_sprite.center_x
            dest_y = self.player_sprite.center_y

            # Do math to calculate how to get the bullet to the destination.
            # Calculation the angle in radians between the start points
            # and end points. This is the angle the bullet will travel.
            x_diff = dest_x - start_x
            y_diff = dest_y - start_y
            angle = math.atan2(y_diff, x_diff)

            # Set the enemy to face the player.
            goblin.angle = math.degrees(angle)-90

            # Shoot every 80 frames change of shooting each frame
            if self.frame_count % 80 == 0:
                bullet1 = arcade.Sprite("images/laserred.png", SPRITE_SCALING_LASERRED)
                bullet1.center_x = start_x
                bullet1.center_y = start_y

                # Angle the bullet sprite
                bullet1.angle = math.degrees(angle)

                # Taking into account the angle, calculate our change_x
                # and change_y. Velocity is how fast the bullet travels.
                bullet1.change_x = math.cos(angle) * BULLET1_SPEED
                bullet1.change_y = math.sin(angle) * BULLET1_SPEED

                self.bullet1_list.append(bullet1)        
        
        # Loop through each bullet
        for bullet1 in self.bullet1_list:
            
            # Check this bullet to see if it hit a player
            hit_list = arcade.check_for_collision_with_list(bullet1, self.player_list)
            
            # If the bullet flies off-screen, remove it.
            if bullet1.bottom > self.width or bullet1.top < 0 or bullet1.right < 0 or bullet1.left > self.width:
                bullet1.kill()
            
            # If it did, get rid of the bullet
            if len(hit_list) > 0:
                bullet1.kill()
                            

        self.bullet_list.update() 
        self.bullet1_list.update() 
        
    def on_mouse_press(self, x, y, button, modifiers):
        """
        Called whenever the mouse moves.
        """
        # Create a bullet
        bullet = arcade.Sprite("images/laser.png", SPRITE_SCALING_LASER)

        # Position the bullet at the player's current location
        start_x = self.player_sprite.center_x
        start_y = self.player_sprite.center_y
        bullet.center_x = start_x
        bullet.center_y = start_y

        # Get from the mouse the destination location for the bullet
        # IMPORTANT! If you have a scrolling screen, you will also need
        # to add in self.view_bottom and self.view_left.
        dest_x = x
        dest_y = y

        # Do math to calculate how to get the bullet to the destination.
        # Calculation the angle in radians between the start points
        # and end points. This is the angle the bullet will travel.
        x_diff = dest_x - start_x
        y_diff = dest_y - start_y
        angle = math.atan2(y_diff, x_diff)

        # Angle the bullet sprite so it doesn't look like it is flying
        # sideways.
        bullet.angle = math.degrees(angle)

        # Taking into account the angle, calculate our change_x
        # and change_y. Velocity is how fast the bullet travels.
        bullet.change_x = math.cos(angle) * BULLET_SPEED
        bullet.change_y = math.sin(angle) * BULLET_SPEED

        # Add the bullet to the appropriate lists
        self.bullet_list.append(bullet)
            
   
    def on_key_press(self, key, modifiers):
        """Called whenever a key is pressed. """

        if key == arcade.key.UP:
            self.player_sprite.change_y = MOVEMENT_SPEED
        elif key == arcade.key.DOWN:
            self.player_sprite.change_y = -MOVEMENT_SPEED
        elif key == arcade.key.LEFT:
            self.player_sprite.change_x = -MOVEMENT_SPEED
        elif key == arcade.key.RIGHT:
            self.player_sprite.change_x = MOVEMENT_SPEED

    def on_key_release(self, key, modifiers):
        """Called when the user releases a key. """

        if key == arcade.key.UP or key == arcade.key.DOWN:
            self.player_sprite.change_y = 0
        elif key == arcade.key.LEFT or key == arcade.key.RIGHT:
            self.player_sprite.change_x = 0

def main():
    window = MyGame()
    window.setup()
    arcade.run()


if __name__ == "__main__":
    main()
